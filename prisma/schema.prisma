// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id        String   @id @default(uuid())
  name      String
  bio       String
  birthdate DateTime
  Book      Book[]
}

model Book {
  id               String         @id @default(uuid())
  title            String
  isbn             String
  publication_year Int
  genre            String
  author           Author         @relation(fields: [authorId], references: [id])
  authorId         String
  booksProduct     BooksProduct[]
}

model BooksProduct {
  id           String        @id @default(uuid())
  bookId       String
  book         Book          @relation(fields: [bookId], references: [id])
  price        Decimal
  stock        Int
  format       String
  warehouseId  String
  warehouse    Warehouse     @relation(fields: [warehouseId], references: [id])
  cartItems    CartItem[]
  invoiceItems InvoiceItem[]
}

model Warehouse {
  id       String         @id @default(uuid())
  name     String
  location String
  capacity Int
  books    BooksProduct[]
}

model Customer {
  id       String    @id @default(uuid())
  name     String
  email    String
  password String
  address  String
  phone    String
  carts    Cart[]
  invoices Invoice[]
}

model Cart {
  id         String     @id @default(uuid())
  customer   Customer   @relation(fields: [customerId], references: [id])
  customerId String
  created_at DateTime   @default(now())
  cartItems  CartItem[]
  invoice    Invoice?
}

model CartItem {
  id             String       @id @default(uuid())
  booksProductId String
  booksProduct   BooksProduct @relation(fields: [booksProductId], references: [id])
  quantity       Int
  cartId         String
  cart           Cart         @relation(fields: [cartId], references: [id])
  created_at     DateTime     @default(now())
}

model Invoice {
  id           String        @id @default(uuid())
  total_amount Decimal
  issued_at    DateTime      @default(now())
  status       String
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   String
  cartId       String        @unique
  cart         Cart          @relation(fields: [cartId], references: [id])
  items        InvoiceItem[]
}

model InvoiceItem {
  id             String       @id @default(uuid())
  booksProduct   BooksProduct @relation(fields: [booksProductId], references: [id])
  booksProductId String
  quantity       Int
  price          Decimal
  invoice        Invoice      @relation(fields: [invoiceId], references: [id])
  invoiceId      String
}
